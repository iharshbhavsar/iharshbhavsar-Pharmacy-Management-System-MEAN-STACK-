{"version":3,"sources":["./src/app/create-medicine/create-medicine.component.ts","./src/app/create-medicine/create-medicine.component.html","./src/app/update-medicine/update-medicine.component.ts","./src/app/update-medicine/update-medicine.component.html","./src/environments/environment.ts","./src/app/delete-medicine/delete-medicine.component.ts","./src/app/delete-medicine/delete-medicine.component.html","./src/app/medicine-list/medicine-list.component.html","./src/app/medicine-list/medicine-list.component.ts","./src/app/medicine-service.service.ts","./src/app/app.module.ts","./src/app/homepage-medicine/homepage-medicine.component.ts","./src/app/homepage-medicine/homepage-medicine.component.html","./src/app/details-medicine/details-medicine.component.ts","./src/app/details-medicine/details-medicine.component.html","./src/app/about-medicine/about-medicine.component.ts","./src/app/about-medicine/about-medicine.component.html","./src/app/framework-medicine/framework-medicine.component.ts","./src/app/framework-medicine/framework-medicine.component.html","./src/app/header-medicine/header-medicine.component.ts","./src/app/header-medicine/header-medicine.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { from } from 'rxjs';\nimport { MedicineServiceService } from '../medicine-service.service';\nimport { Medicine } from '../medicine'\n\n@Component({\n  selector: 'app-create-medicine',\n  templateUrl: './create-medicine.component.html',\n  styleUrls: ['./create-medicine.component.css'],\n  providers:[MedicineServiceService]\n})\nexport class CreateMedicineComponent implements OnInit {\n  public newmedicine: Medicine ={\n    _id: '',\n    name: '',\n    disease:'',\n    price:'',\n    companyname:'',\n    quantity:'',\n    type:'',\n    effectiveness:null\n  \n  };\n\n  constructor(private MedicineService : MedicineServiceService) { }\n\n  ngOnInit(): void {\n  }\n\n  public createNewMedicine(newmedicine: Medicine): void{\n    this.MedicineService.createMedicine(newmedicine);\n  }\n\n}\n","<br>\n<form (ngSubmit)=\"createNewMedicine(newmedicine)\">\n    <br>\n    <label for=\"name\">Name:   </label>\n    <input [(ngModel)]=\"newmedicine.name\" id=\"name\" name=\"name\" placeholder=\"Enter Medicine name \" required=\"required\"><br><br>\n    <label for=\"disease\">Disease:  </label>\n    <input [(ngModel)]=\"newmedicine.disease\" id=\"disease\" name=\"disease\" placeholder=\"Enter Disease\" required=\"required\"><br><br>\n    <label for=\"price\">Price:   </label>\n    <input [(ngModel)]=\"newmedicine.price\" id=\"price\" name=\"price\" placeholder=\"Enter Price\" required=\"required\"><br><br>\n    <label for=\"companyname\">Company Name:</label>\n    <input [(ngModel)]=\"newmedicine.companyname\" id=\"companyname\" placeholder=\"Enter Company Name \" name=\"companyname\" required=\"required\"><br><br>\n    <label for=\"Quantity\">Quantity: </label>\n    <input [(ngModel)]=\"newmedicine.quantity\" id=\"quantity\" placeholder=\"Enter Quantity\" name=\"quantity\" required=\"required\"><br><br>\n    <label for=\"type\">Type:   </label>\n    <input [(ngModel)]=\"newmedicine.type\" id=\"type\" name=\"type\" placeholder=\"Enter Type\" required=\"required\"><br><br>\n    <label for=\"effectiveness\">Effectiveness:   </label>\n    <input [(ngModel)]=\"newmedicine.effectiveness\" id=\"effectiveness\" placeholder=\"Enter Medicine Effectiveness\" name=\"effectiveness\" required=\"required\"><br><br>\n    <button type=\"submit\">\n       CREATE\n    </button><br><br>\n    <a routerLink=\"\">Back to home</a>\n</form>\n","import { Component, OnInit } from '@angular/core';\nimport{Medicine}from'../medicine';\nimport{MedicineServiceService}from'../medicine-service.service';\nimport{switchMap}from'rxjs/operators';\nimport{ActivatedRoute,Params}from'@angular/router';\n\n@Component({\n  selector: 'app-update-medicine',\n  templateUrl: './update-medicine.component.html',\n  styleUrls: ['./update-medicine.component.css'],\n  providers:[MedicineServiceService]\n\n})\nexport class UpdateMedicineComponent implements OnInit {\n  public selectedMedicine: Medicine ={\n    _id: '',\n    name: '',\n    disease:'',\n    price:'',\n    companyname:'',\n    quantity:'',\n    type:'',\n    effectiveness:null\n  \n  };\n  constructor(private MedicineService : MedicineServiceService,private route:ActivatedRoute) { }\n  \n  pageContent ={\n    header: {\n      title:'', body:''\n    }\n  }\n\n  ngOnInit(): void {\n    this.route.params.pipe(switchMap((params: Params) => {\n      \n      return this.MedicineService.getSingleMedicine(params.medicineid)\n    }))\n\n    .subscribe((selectedMedicine:Medicine) => {\n       // console.log(selectedBook);\n        this.selectedMedicine = selectedMedicine;\n         this.pageContent.header.title = selectedMedicine.name;\n        this.pageContent.header.body = 'Details for selected Medicine';\n  });\n\n  }\n  updatenewMedicine(selectedMedicine:Medicine):void{\n    \n   \n   this.MedicineService.updateMedicine(selectedMedicine,selectedMedicine._id);\n\n  }\n}\n","<br>\n<form (ngSubmit)=\"updatenewMedicine(selectedMedicine)\">\n    <br>\n    <label for=\"name\">Name:   </label>\n    <input [(ngModel)]=\"selectedMedicine.name\" id=\"name\" name=\"name\" placeholder=\"Enter Medicine name \" required=\"required\"><br><br>\n    <label for=\"disease\">Disease:  </label>\n    <input [(ngModel)]=\"selectedMedicine.disease\" id=\"disease\" name=\"disease\" placeholder=\"Enter Disease\" required=\"required\"><br><br>\n    <label for=\"price\">Price:   </label>\n    <input [(ngModel)]=\"selectedMedicine.price\" id=\"price\" name=\"price\" placeholder=\"Enter Price\" required=\"required\"><br><br>\n    <label for=\"companyname\">Company Name:</label>\n    <input [(ngModel)]=\"selectedMedicine.companyname\" id=\"companyname\" placeholder=\"Enter Company Name \" name=\"category\" required=\"required\"><br><br>\n    <label for=\"rating\">Quantity: </label>\n    <input [(ngModel)]=\"selectedMedicine.quantity\" id=\"quantity\" placeholder=\"Enter Quantity\" name=\"rating\" required=\"required\"><br><br>\n    <label for=\"type\">Type:   </label>\n    <input [(ngModel)]=\"selectedMedicine.type\" id=\"type\" name=\"type\" placeholder=\"Enter Type\" required=\"required\"><br><br>\n    <label for=\"effectiveness\">Effectiveness:   </label>\n    <input [(ngModel)]=\"selectedMedicine.effectiveness\" id=\"effectiveness\" placeholder=\"Enter Medicine Effectiveness\" name=\"effectiveness\" required=\"required\"><br><br>\n    <button type=\"submit\">\n       Update\n    </button><br><br>\n    <a routerLink=\"\">Back to home</a>\n</form>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport{Medicine}from'../medicine';\nimport{MedicineServiceService}from'../medicine-service.service';\nimport{switchMap}from'rxjs/operators';\nimport{ActivatedRoute,Params}from'@angular/router';\n\n@Component({\n  selector: 'app-delete-medicine',\n  templateUrl: './delete-medicine.component.html',\n  styleUrls: ['./delete-medicine.component.css'],\n  providers:[MedicineServiceService]\n})\nexport class DeleteMedicineComponent implements OnInit {\n\n  constructor(private MedicineService:MedicineServiceService,private route:ActivatedRoute) { }\n\n  newmedicine:Medicine;\n  pageContent ={\n    header: {\n      title:'', body:''\n    }\n  };\n\n  ngOnInit(): void {\n    this.route.params.pipe(switchMap((params: Params) => {\n      return this.MedicineService.delSingleMedicine(params.medicineid);\n    }))\n      .subscribe((newmedicine:Medicine) => {\n        console.log('Selected medicine', newmedicine);\n        this.newmedicine = newmedicine;\n        this.pageContent.header.title = newmedicine.name;\n        this.pageContent.header.body = 'Details for selected Medicine';\n      });\n\n  }\n\n}\n","<app-header-medicine [content]=\"pageContent.header\">\n</app-header-medicine>\n<p> Medicine is Deleted successfully</p>\n<a routerLink=\"\">Back to Home</a>\n","<p>home-list works!</p>\n<ul>\n    <li *ngFor=\"let medicine of medicines;\">\n        <a routerLink=\"/medicines/{{ medicine._id }}\" >{{medicine.name}}</a>\n    </li>\n</ul>","import { Component, OnInit } from '@angular/core';\nimport { Medicine } from '../medicine';\nimport { MedicineServiceService } from \"../medicine-service.service\";\n\n@Component({\n  selector: 'app-medicine-list',\n  templateUrl: './medicine-list.component.html',\n  styleUrls: ['./medicine-list.component.css']\n})\nexport class MedicineListComponent implements OnInit {\nmedicines:Medicine[]\n  constructor( private MedicineService: MedicineServiceService) {  }ngOnInit(): void {this.MedicineService.getMedicines()\n    .then((medicines: Medicine[])=>{this.medicines = medicines.map(medicine =>{return medicine;});\n});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Medicine } from './medicine';\nimport {HttpClient, HttpResponse} from \"@angular/common/http\";\n@Injectable({\n  providedIn: 'root'\n})\nexport class MedicineServiceService {\n\n  private medicinesUrl = 'http://localhost:3000/api/medicines';\n  constructor(private http:HttpClient){}\n  getMedicines(): Promise<void | Medicine[]>{\n    return this.http.get(this.medicinesUrl)\n    .toPromise()\n    .then(response => response as Medicine[])\n    .catch(this.handleError);\n  }\n  getSingleMedicine(medicineid:string):Promise<void|Medicine>{\n    return this.http.get(this.medicinesUrl+'/'+medicineid)\n      .toPromise()\n      .then(Response=>Response as Medicine)\n      .catch(this.handleError);}\n  private handleError(error: any){\n    console.log(\"error\");\n  }\n  createMedicine(newmedicine: Medicine): Promise<void | Medicine>{\n    return this.http.post(this.medicinesUrl, newmedicine)\n      .toPromise()\n      .then(response => response as Medicine)\n      .catch(this.handleError);\n    }\n  delSingleMedicine(medicineid:string):Promise<void|Medicine>{\n      return this.http.get(this.medicinesUrl+'/delete/'+medicineid)\n        .toPromise()\n        .then(Response=>Response as Medicine)\n        .catch(this.handleError);\n      }\n  updateMedicine(updatemedicineData: Medicine,medicineid: string): Promise<void | Medicine>{\n        return this.http.put(this.medicinesUrl+'/update/'+medicineid, updatemedicineData)\n          .toPromise()\n          .then(response => response as Medicine)\n          .catch(this.handleError);\n        }        \n\n  \n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport {APP_BASE_HREF} from '@angular/common';\nimport {RouterModule} from '@angular/router';\nimport{FormsModule}from'@angular/forms';\n\nimport { MedicineListComponent } from './medicine-list/medicine-list.component';\nimport { AboutMedicineComponent } from './about-medicine/about-medicine.component';\nimport { HomepageMedicineComponent } from './homepage-medicine/homepage-medicine.component';\nimport { HeaderMedicineComponent } from './header-medicine/header-medicine.component';\nimport { FrameworkMedicineComponent } from './framework-medicine/framework-medicine.component';\nimport { CreateMedicineComponent } from './create-medicine/create-medicine.component';\nimport { DetailsMedicineComponent } from './details-medicine/details-medicine.component';\nimport { DeleteMedicineComponent } from './delete-medicine/delete-medicine.component';\nimport { UpdateMedicineComponent } from './update-medicine/update-medicine.component';\n\n@NgModule({\n  declarations: [\n    MedicineListComponent,\n    AboutMedicineComponent,\n    HomepageMedicineComponent,\n    HeaderMedicineComponent,\n    FrameworkMedicineComponent,\n    CreateMedicineComponent,\n    DetailsMedicineComponent,\n    DeleteMedicineComponent,\n    UpdateMedicineComponent\n  ],\n  imports: [\n    FormsModule,\n    BrowserModule,\n    HttpClientModule,\n    RouterModule.forRoot([\n      {\n        path:'',\n        component:HomepageMedicineComponent\n      },\n      {\n        path:'about',\n        component:AboutMedicineComponent\n      },\n      {\n        path:'create',\n        component:CreateMedicineComponent\n      },\n      {\n        path:'medicines/:medicineid',\n        component:DetailsMedicineComponent\n      },\n      {\n        path:'medicines/delete/:medicineid',\n        component:DeleteMedicineComponent\n      },\n      {\n        path:'medicines/update/:medicineid',\n        component:UpdateMedicineComponent\n      }\n    ])\n  ],\n  providers: [{provide:APP_BASE_HREF,useValue:'/'}],\n  bootstrap: [FrameworkMedicineComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-homepage-medicine',\n  templateUrl: './homepage-medicine.component.html',\n  styleUrls: ['./homepage-medicine.component.css']\n})\nexport class HomepageMedicineComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n\n  }\n  pageContent = {\n    header: {\n    title: 'My Medicine List',\n    body: 'This is a list of Medicine'\n  }\n};\n}\n","<p>homepage-medicine works!</p>\n<app-header-medicine [content]=\"pageContent.header\"></app-header-medicine>\n<app-medicine-list></app-medicine-list>","import { Component, OnInit } from '@angular/core';\nimport{Medicine}from'../medicine';\nimport{MedicineServiceService}from'../medicine-service.service';\nimport{switchMap}from'rxjs/operators';\nimport{ActivatedRoute,Params}from'@angular/router';\n\n\n@Component({\n  selector: 'app-details-medicine',\n  templateUrl: './details-medicine.component.html',\n  styleUrls: ['./details-medicine.component.css'],\n  providers:[MedicineServiceService]\n})\nexport class DetailsMedicineComponent implements OnInit {\n\n\n  constructor(private MedicineService:MedicineServiceService,private route:ActivatedRoute) { }\n\n  newmedicine:Medicine;\n  pageContent ={\n    header: {\n      title:'', body:''\n    }\n  };\n\n  ngOnInit(): void {\n    this.route.params.pipe(switchMap((params: Params) => {\n      return this.MedicineService.getSingleMedicine(params.medicineid);\n    }))\n      .subscribe((newmedicine:Medicine) => {\n        console.log('Selected Medicine', newmedicine);\n        this.newmedicine = newmedicine;\n        this.pageContent.header.title = newmedicine.name;\n        this.pageContent.header.body = 'Details for selected Medicine';\n      });\n\n    }\n  }","<p>details-medicine works!</p>\n<app-header-medicine [content]=\"pageContent.header\">\n</app-header-medicine>\n    <p>{{newmedicine.name}}</p>\n    <p>{{newmedicine.disease}}</p>\n    <p>{{newmedicine.price}}</p>\n    <p>{{newmedicine.companyname}}</p>\n    <p>{{newmedicine.quantity}}</p>\n    <p>{{newmedicine.type}}</p>\n    <p>{{newmedicine.effectiveness}}</p>\n    <!-- <ul>\n    <li *ngFor=\"let medicine of newmedicine;\">\n    <a routerLink=\"/medicines/delete/{{medicine._id}}\">Delete </a> &nbsp; |  &nbsp;\n    <a routerLink=\"/medicines/update/{{medicine._id}}\">Update</a>\n    </li>\n    </ul> -->\n    \n    <button type=\"submit\"><a routerLink=\"/medicines/delete/{{newmedicine._id}}\">Delete </a></button> &nbsp; |  &nbsp;\n    <button type=\"submit\"><a routerLink=\"/medicines/update/{{newmedicine._id}}\">Update</a></button>\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-about-medicine',\n  templateUrl: './about-medicine.component.html',\n  styleUrls: ['./about-medicine.component.css']\n})\nexport class AboutMedicineComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>about-medicine works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-framework-medicine',\n  templateUrl: './framework-medicine.component.html',\n  styleUrls: ['./framework-medicine.component.css']\n})\nexport class FrameworkMedicineComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>framework works!</p>\n<span>\n    &nbsp;&nbsp;<a routerLink=\"\">Home</a>\n    &nbsp;&nbsp;<a routerLink=\"about\">About</a>\n    &nbsp;&nbsp;<a routerLink=\"create\">Create</a>\n </span>\n<router-outlet></router-outlet>","import { Component, OnInit,Input } from '@angular/core';\n\n@Component({\n  selector: 'app-header-medicine',\n  templateUrl: './header-medicine.component.html',\n  styleUrls: ['./header-medicine.component.css']\n})\nexport class HeaderMedicineComponent implements OnInit {\n  @Input() content: any;\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>header-medicine works!</p>\n<div class=\"row banner\">\n    <div class=\"col-12\">\n        <h1>{{ content.title }}\n            <p>{{ content.body }}</p>\n        </h1>\n        \n\n    </div>\n\n</div>","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}